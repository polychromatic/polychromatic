#!/usr/bin/python3
#
# Polychromatic is free software: you can redistribute it and/or modify
# it under the temms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Polychromatic is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Polychromatic. If not, see <http://www.gnu.org/licenses/>.
#
# Copyright (C) 2015-2021 Luke Horwell <code@horwell.me>
#               2015-2016 Terry Cain <terry@terrys-home.co.uk>

"""
The primary "Controller" GUI for Polychromatic based on PyQt5.
"""
import argparse
import json
import os
import signal
import threading
import setproctitle
import sys

from PyQt5 import uic, QtCore
from PyQt5.QtCore import QThreadPool
from PyQt5.QtGui import QIcon, QFont, QFontDatabase
from PyQt5.QtWebEngineWidgets import QWebEngineView
from PyQt5.QtWidgets import QApplication, QMainWindow, QWidget, QPushButton, \
                            QToolButton, QTabWidget, QAction, QMenu, \
                            QDesktopWidget

VERSION = "0.6.0"

# Import modules if running relatively.
if os.path.exists(os.path.join(os.path.dirname(__file__), "pylib")):
    try:
        import pylib.preferences as pref
        import pylib.common as common
        import pylib.locales as locales
        import pylib.controller as controller
        import pylib.effects as effects
        import pylib.middleman as middleman
        import pylib.controller.shared as shared
    except (ImportError, Exception) as e:
        print("Failed to import modules relatively.\n")
        raise e

# Import modules if installed system-wide.
else:
    try:
        import polychromatic.preferences as pref
        import polychromatic.common as common
        import polychromatic.locales as locales
        import polychromatic.controller as controller
        import polychromatic.effects as effects
        import polychromatic.middleman as middleman
        import polychromatic.controller.shared as shared
    except (ImportError, Exception) as e:
        print("Polychromatic's modules could not be imported.")
        print("Check all dependencies are installed, the Python environment variables are correct, or try re-installing the application.\n")
        raise e


class ApplicationData(object):
    """
    Shared data that is globally accessible throughout the application.
    This includes save data variables and objects for each tab.
    """
    def __init__(self, qapp, dbg, _, paths, hidpi):
        """
        Prepare the object.
        """
        self.main_window = None
        self.main_app = qapp
        self.dbg = dbg
        self.locales = i18n
        self._ = _
        self.paths = paths
        self.exec_path = __file__
        self.exec_args = sys.argv
        self.hidpi = hidpi
        self.version = VERSION
        self.versions = VERSIONS

        # UI Colours (based on SCSS variables)
        self.normal_colour = "#DED9CB"      # $button-text-colour
        self.disabled_colour = "#575757"    # $text-disabled
        self.active_colour = "#00FF00"      # $primary
        self.selected_colour = "#00FF00"    # $primary
        self.secondary_colour_active = "#008000"    # $secondary
        self.secondary_colour_inactive = "#808080"  # $secondary (desaturated)

        # Assigned in load() later
        self.middleman = None
        self.menubar = None
        self.device_list = []
        self.current_device = None
        self.effect_list = None

        # Settings
        dbg.stdout("Loading preferences...", dbg.action, 1)
        self.preferences = pref.load_file(self.paths.preferences)
        self.system_qt_theme = self.preferences["controller"]["system_qt_theme"]
        self.show_menu_bar = self.preferences["controller"]["show_menu_bar"]

        # Preferences Variables
        self.window_centered = 0
        self.window_remember = 1
        self.window_ignore = 2

    def load(self):
        """
        Load the application's tab, save data and session data.
        """
        self.main_window = MainWindow()

        # Polychromatic's Qt theme is based on Fusion, for consistency.
        if not self.system_qt_theme:
            qapp.setStyle("Fusion")

        # Misc
        self.menubar = controller.menubar.MenuBar(self)

        # Session Data
        dbg.stdout("Getting device list...", dbg.action, 1)
        self.middleman = middleman.Middleman(dbg, common, _)
        self.middleman.init()
        self.device_list = self.middleman.get_device_list()
        self.current_device = None

        # Tabs
        self.tab_devices = controller.devices.DevicesTab(self)
        self.tab_effects = controller.effects.EffectsTab(self)
        self.tab_presets = controller.presets.PresetsTab(self)
        self.tab_triggers = controller.triggers.TriggersTab(self)

        # Subwindows
        self.ui_preferences = controller.preferences.PreferencesWindow(self)

        # Enable active backends in menu bar
        # -- OpenRazer
        if "openrazer" in self.middleman.not_installed:
            for action in ["actionOpenRazerConfigure",
                           "actionOpenRazerReportBug",
                           "actionOpenRazerOpenLog",
                           "actionOpenRazerRestartDaemon",
                           "actionOpenRazerAbout"]:
                self.main_window.findChild(QAction, action).setEnabled(False)

        self.main_window.load()


class MainWindow(QMainWindow):
    """
    The main window is the first window the user will use and interact with.
    """
    def __init__(self):
        dbg.stdout("Initalising application...", dbg.action, 1)
        super(MainWindow, self).__init__()

        # Load UI and locales
        widget = uic.loadUi(os.path.join(common.paths.data_dir, "qt", "main.ui"), self)
        shared.translate_ui(app, widget)

        header = self.findChild(QWidget, "Header")
        tabs = self.findChild(QWidget, "MainTabWidget")
        tabs_custom = self.findChild(QWidget, "MainTabCustom")

        if app.system_qt_theme:
            # User prefers own Qt theme, use native tabs.
            header.hide()
            tabs_custom.hide()
        else:
            # Custom Qt theme uses a different tab design. Hide native tabs.
            tabs.tabBar().hide()

        # Set window attributes
        self.setWindowIcon(QIcon(common.get_icon("general", "controller.svg")))
        self.setWindowTitle("Polychromatic")

        # Prepare Menu Bar
        self.findChild(QAction, "actionReinstateMenuBar").setVisible(False)
        if not app.preferences["controller"]["show_menu_bar"]:
            self.menuBar().hide()
            self.findChild(QAction, "actionReinstateMenuBar").setVisible(True)

        # CTRL+C'd
        signal.signal(signal.SIGINT, signal.SIG_DFL)

        self.CloseButton = self.findChild(QPushButton, "CloseApp")
        self.CloseButton.clicked.connect(self.quit_app)
        self.closeEvent = self.quit_app

    @staticmethod
    def _set_initial_window_position(qmainwindow, key_prefix):
        """
        Sets the initial placement of the window, according to user's preferences.

        Params:
            qmainwindow         QMainWindow() instance
            key_prefix          Name of prefix for save data. Should be initialized in preferences.
        """
        win_behaviour = app.preferences["controller"]["window_behaviour"]

        if win_behaviour == app.window_ignore:
            return

        if win_behaviour == app.window_centered:
            frame = qmainwindow.frameGeometry()

            # DEPRECATED: QDesktopWidget(), but some distros ship an older Qt version (5.8, 5.12)
            qt_ver = QtCore.PYQT_VERSION_STR.split(".")
            if qt_ver[0] == "5" and int(qt_ver[1]) <= 14:
                center = QDesktopWidget().availableGeometry().center()
            else:
                # For >= Qt 5.15
                center = qmainwindow.screen().availableGeometry().center()

            frame.moveCenter(center)
            qmainwindow.move(frame.topLeft())

        elif win_behaviour == app.window_remember:
            dbg.stdout("Loading window geometry...", dbg.action, 1)
            pos_x = app.preferences["geometry"][key_prefix + "_window_pos_x"]
            pos_y = app.preferences["geometry"][key_prefix + "_window_pos_y"]
            size_x = app.preferences["geometry"][key_prefix + "_window_size_x"]
            size_y = app.preferences["geometry"][key_prefix + "_window_size_y"]
            qmainwindow.setGeometry(pos_x, pos_y, size_x, size_y)

    @staticmethod
    def _save_window_position(qmainwindow, key_prefix):
        """
        Saves the dimensions and position of the window, according to the user's
        preferences.
        """
        win_behaviour = app.preferences["controller"]["window_behaviour"]

        if win_behaviour == app.window_remember:
            dbg.stdout("Saving window geometry...", dbg.action, 1)
            rect = qmainwindow.frameGeometry()
            app.preferences["geometry"][key_prefix + "_window_pos_x"] = rect.left()
            app.preferences["geometry"][key_prefix + "_window_pos_y"] = rect.top()
            app.preferences["geometry"][key_prefix + "_window_size_x"] = rect.width()
            app.preferences["geometry"][key_prefix + "_window_size_y"] = rect.height()
            pref.save_file(common.paths.preferences, app.preferences)

    def load(self):
        """
        Objects initalised. Continue loading the main application window
        containing all the tabs.
        """
        # Finish loading UI style/fonts
        QFontDatabase.addApplicationFont(os.path.join(common.paths.data_dir, "qt", "fonts", "Play_regular.ttf"))
        controller.shared.load_qt_theme(app, self)

        if not app.system_qt_theme:
            qapp.setFont(QFont("Play", 10, 0))

        # Tab objects - custom design and native tabs
        tabs = self.findChild(QTabWidget, "MainTabWidget")

        # Prepare events when clicking on custom tabs or real tabs:
        tab_buttons = [
            self.findChild(QToolButton, "DevicesTabButton"),
            self.findChild(QToolButton, "EffectsTabButton"),
            self.findChild(QToolButton, "PresetsTabButton"),
            self.findChild(QToolButton, "TriggersTabButton")
        ]

        # Also in the menu bar
        tab_menu_items = [
            self.findChild(QAction, "actionDevices"),
            self.findChild(QAction, "actionEffects"),
            self.findChild(QAction, "actionPresets"),
            self.findChild(QAction, "actionTriggers")
        ]

        # Tab icons
        widgets = shared.PolychromaticWidgets(app)
        tab_buttons[0].setIcon(widgets.get_icon_qt("general", "devices"))
        tab_buttons[1].setIcon(widgets.get_icon_qt("general", "effects"))
        tab_buttons[2].setIcon(widgets.get_icon_qt("general", "presets"))
        tab_buttons[3].setIcon(widgets.get_icon_qt("general", "triggers"))

        # Load button icons
        if not app.system_qt_theme:
            # -- File
            self.findChild(QAction, "actionNewEffect").setIcon(widgets.get_icon_qt("general", "effects"))
            self.findChild(QAction, "actionImportEffect").setIcon(widgets.get_icon_qt("general", "import"))
            self.findChild(QAction, "actionNewPreset").setIcon(widgets.get_icon_qt("general", "presets"))
            self.findChild(QAction, "actionNewPresetNow").setIcon(widgets.get_icon_qt("devices", "all"))
            self.findChild(QAction, "actionQuitApp").setIcon(widgets.get_icon_qt("general", "exit"))

            # -- Edit
            self.findChild(QAction, "actionDuplicate").setIcon(widgets.get_icon_qt("general", "clone"))
            self.findChild(QAction, "actionDelete").setIcon(widgets.get_icon_qt("general", "delete"))
            self.findChild(QAction, "actionRefreshTab").setIcon(widgets.get_icon_qt("general", "refresh"))
            self.findChild(QAction, "actionPreferences").setIcon(widgets.get_icon_qt("general", "preferences"))

            # -- View
            self.findChild(QAction, "actionDevices").setIcon(widgets.get_icon_qt("general", "devices"))
            self.findChild(QAction, "actionEffects").setIcon(widgets.get_icon_qt("general", "effects"))
            self.findChild(QAction, "actionPresets").setIcon(widgets.get_icon_qt("general", "presets"))
            self.findChild(QAction, "actionTriggers").setIcon(widgets.get_icon_qt("general", "triggers"))
            self.findChild(QAction, "actionReinstateMenuBar").setIcon(widgets.get_icon_qt("general", "pin"))
            self.findChild(QAction, "actionHideMenuBar").setIcon(widgets.get_icon_qt("general", "pin"))

            # -- Tools
            self.findChild(QMenu, "menuTroubleshoot").setIcon(widgets.get_icon_qt("emblems", "utility"))
            self.findChild(QAction, "actionRestartTrayApplet").setIcon(widgets.get_icon_qt("general", "tray-applet"))
            self.findChild(QAction, "actionRestartHelper").setIcon(widgets.get_icon_qt("general", "refresh"))

            # -- Tools/OpenRazer
            self.findChild(QAction, "actionOpenRazerWebsite").setIcon(widgets.get_icon_qt("general", "external"))
            self.findChild(QAction, "actionOpenRazerConfigure").setIcon(widgets.get_icon_qt("general", "preferences"))
            self.findChild(QAction, "actionOpenRazerOpenLog").setIcon(widgets.get_icon_qt("general", "folder"))
            self.findChild(QAction, "actionOpenRazerRestartDaemon").setIcon(widgets.get_icon_qt("general", "refresh"))

            # -- Help
            self.findChild(QAction, "actionOnlineHelp").setIcon(widgets.get_icon_qt("general", "external"))

        # Code for each tab is stored in a separate module
        tab_objects = [
            app.tab_devices,
            app.tab_effects,
            app.tab_presets,
            app.tab_triggers
        ]

        def _change_tab():
            index = tabs.currentIndex()
            dbg.stdout("Opening tab: " + str(index), dbg.debug, 1)
            self.setCursor(QtCore.Qt.WaitCursor)

            for button in tab_buttons:
                button.setChecked(False)
            for item in tab_menu_items:
                item.setChecked(False)

            tab_buttons[index].setChecked(True)
            tab_menu_items[index].setChecked(True)
            try:
                tab_objects[index].set_tab()
            except Exception as e:
                traceback = common.get_exception_as_string(e)
                print(traceback)
                widgets = controller.shared.PolychromaticWidgets(app)
                widgets.open_dialog(widgets.dialog_error,
                                    _("Controller Error"),
                                    _("Eeks! An uncaught exception was thrown while loading the tab.") + '\n\n' + \
                                    _("The application will attempt to continue, but get ready in case something breaks again!"),
                                    _("This may be reported as a bug on the project's issue tracker."),
                                    traceback=traceback)
            self.unsetCursor()

        def _change_tab_proxy(button, index):
            tabs.setCurrentIndex(index)

            # Clicking onto the 'button tab' should reload
            if button == False:
                _change_tab()

        tabs.currentChanged.connect(_change_tab)

        # Press F5 to refresh tab
        self.findChild(QAction, "actionRefreshTab").triggered.connect(_change_tab)

        # TODO: Move to a loop, but watch out for variable references
        tab_buttons[0].clicked.connect(lambda a: _change_tab_proxy(a, 0))
        tab_buttons[1].clicked.connect(lambda a: _change_tab_proxy(a, 1))
        tab_buttons[2].clicked.connect(lambda a: _change_tab_proxy(a, 2))
        tab_buttons[3].clicked.connect(lambda a: _change_tab_proxy(a, 3))
        tab_menu_items[0].triggered.connect(lambda a: _change_tab_proxy(a, 0))
        tab_menu_items[1].triggered.connect(lambda a: _change_tab_proxy(a, 1))
        tab_menu_items[2].triggered.connect(lambda a: _change_tab_proxy(a, 2))
        tab_menu_items[3].triggered.connect(lambda a: _change_tab_proxy(a, 3))

        # FIXME: Disable unavailable features
        self.findChild(QAction, "actionImportEffect").setEnabled(False)
        self.findChild(QAction, "actionRestartHelper").setEnabled(False)
        tab_buttons[2].setDisabled(True)
        tab_buttons[3].setDisabled(True)
        tab_menu_items[2].setDisabled(True)
        tab_menu_items[3].setDisabled(True)

        # Determine 'landing' tab to first open
        landing_tab = app.preferences["controller"]["landing_tab"]

        if landing_tab >= 0 and landing_tab <= len(tab_objects):
            # Signal triggered upon switching tab in the widget.
            _change_tab_proxy(None, landing_tab)

            # Signal is not triggered as the starting page is already 0.
            if landing_tab == 0:
                _change_tab()

        # Bind actions to menu bar
        self.findChild(QAction, "actionQuitApp").triggered.connect(self.quit_app)

        # Warn if configuration is newer then this version.
        pref_ver = pref.VERSION
        save_ver = app.preferences["config_version"]
        if save_ver > pref_ver:
            widgets = controller.shared.PolychromaticWidgets(app)
            details = "Polychromatic v{0}\nSave Data: {1} (application requires {2} or older)".format(VERSION, save_ver, pref_ver)
            widgets.open_dialog(widgets.dialog_warning,
                                _("Incompatible Save Data"),
                                "{0}\n\n{1}\n\n{2}".format(
                                    _("Polychromatic's configuration (including your effects and presets) have been previously saved in a newer version of this software."),
                                    _("Running older versions of the software could corrupt your save data or cause impaired operation. This is unsupported."),
                                    _("Consider updating the application, or reset your save data by deleting: ~/.config/polychromatic")),
                                traceback=details)

        self._set_initial_window_position(self, "main")

        # Alternate modes
        if args.open:
            if args.open == "troubleshoot":
                # TODO: Should support multiple backends!
                app.menubar.openrazer.troubleshoot()
                return
            elif args.open == "colours":
                app.ui_preferences.modify_colours()
                exit()

        # Showtime!
        self.show()

    def quit_app(self, event=None, b=None):
        """
        Closes the main application window. This won't stop the execution
        entirely until the last editor window is closed.
        """
        # Save window position if preference set.
        if app.preferences["controller"]["window_behaviour"] == app.window_remember:
            self._save_window_position(self, "main")

        dbg.stdout("Main window closed, goodbye!", dbg.success, 1)
        self.close()

    def keyPressEvent(self, e):
        """
        Pressing 'Alt' will reveal the menu bar.
        """
        if e.key() == QtCore.Qt.Key_Alt:
            self.menuBar().show()


def get_versions():
    """
    Returns a list of the application version and its components.
    """
    app_version, git_commit, py_version = common.get_versions(VERSION)

    versions = [
        [_("Application"), app_version],
        [_("Save Data"), str(pref.VERSION)],
        ["Python", py_version],
        ["Qt", QtCore.PYQT_VERSION_STR],
    ]

    if git_commit:
        versions.insert(1, ["Commit", git_commit])

    return versions


def parse_parameters():
    """
    Process the parameters passed to the application.
    """
    global _

    tab_choices = [
        "devices",
        "effects",
        "presets",
        "triggers",
        "troubleshoot",
        "colours"
    ]

    parser = argparse.ArgumentParser(add_help=False)
    parser._optionals.title = _("Optional arguments")
    parser.add_argument("-h", "--help", help=_("Show this help message and exit"), action="help")
    parser.add_argument("--version", help=_("Print program version and exit"), action="store_true")
    parser.add_argument("-v", "--verbose", help=_("Be verbose to stdout"), action="store_true")
    parser.add_argument("--locale", help=_("Force a specific language, e.g. de_DE"), action="store")
    parser.add_argument("--open", help=_("Open a specific tab or feature"), action="store", choices=tab_choices)

    args = parser.parse_args()

    if args.version:
        versions = get_versions()
        print("Polychromatic " + versions[0][1])
        del(versions[0])
        for version in versions:
            print("{0}: {1}".format(version[0], version[1]))
        exit(0)

    if args.verbose:
        dbg.verbose_level = 1

    if args.locale:
        i18n = locales.Locales(__file__, args.locale)
        _ = i18n.init()

    return args


if __name__ == "__main__":
    setproctitle.setproctitle("polychromatic-controller")

    dbg = common.Debugging()
    i18n = locales.Locales(__file__)
    _ = i18n.init()
    VERSIONS = get_versions()

    args = parse_parameters()
    pref.init(_)

    # Improve resolution for HiDPI displays
    HIDPI = False
    if hasattr(QtCore.Qt, "AA_EnableHighDpiScaling"):
        QApplication.setAttribute(QtCore.Qt.AA_EnableHighDpiScaling, True)
        HIDPI = True

    if hasattr(QtCore.Qt, "AA_UseHighDpiPixmaps"):
        QApplication.setAttribute(QtCore.Qt.AA_UseHighDpiPixmaps, True)

    qapp = QApplication(sys.argv)
    app = ApplicationData(qapp, dbg, _, common.paths, HIDPI)
    app.load()
    qapp.exec_()
